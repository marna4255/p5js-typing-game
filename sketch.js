//Global variables
let guessItem = null; //Holds an instance of GuessItem, the item to guess
let interval = 60; //Sets the interval for creating a new GuessItem
let results = []; //Stores the game results
let solution = null; //holds the result of the guess (true or false)
let gameOver = false;

function setup() {
  createCanvas(800, 300); //Creates the canvas
}

function draw() {
  let gameScore = getGameScore(results); //Calculates the current game score
  //Ends the game if..
  if (gameScore.loss >= 3 || gameScore.total >= 10) {
    gameOver = true;
    displayGameOver(gameScore);
    return;
  }
  background(220);
  //Every interval frames, it creates a new GuessItem at the center of the canvas.
  if (frameCount === 1 || frameCount % interval === 0) {
    solution = null; //clearing any previous guess result.
    guessItem = new GuessItem(width / 2, height / 2, 10); //creates a new GuessItem instance centered on the canvas
  }

  // Renders guessItem if it exists.
  if (guessItem) {
    guessItem.render(); //calls the render method to display the current GuessItem
  }
  if (solution === true || solution === false) {
    solutionMessage(gameScore.total, solution);
  }
}

function solutionMessage(seed, solution) {
  let trueMessages = [
    "GOOD JOB!",
    "DOING GREAT!",
    "OMG!",
    "SUCH WIN!",
    "I APPRECIATE YOU!",
    "IMPRESSIVE",
  ];

  let falseMessages = ["OH NO!", "BETTER LUCK NEXT TIME!", ":-("];

  let messages;

  push();
  textAlign(CENTER, CENTER);
  textSize(36);
  fill(237, 34, 93);
  randomSeed(seed * 10000);

  if (solution === true) {
    background(255);
    messages = trueMessages;
  } else if (solution === false) {
    background(0);
    messages = falseMessages;
  }

  translate(width / 2, height / 2);
  text(messages[parseInt(random(messages.length), 10)], 0, 0);
  pop();
}

function displayGameOver(score) {
  push();
  background(255);
  textAlign(CENTER, CENTER);
  translate(width / 2, height / 2);
  fill(237, 34, 93);
  textSize(24);
  text(`Game Over!`, 0, 0);

  fill(0);
  translate(0, 36);
  text(`You have ${score.win} correct guesses `, 0, 0);

  let alternatingValue = map(sin(frameCount / 10), -1, 1, 0, 255);
  fill(237, 34, 93, alternatingValue);
  textSize(16);
  translate(0, 80);
  text(`PRESS ENTER`, 0, 0);
  pop();
}

//Calculates the number of wins, losses, and total attempts
function getGameScore(score) {
  let wins = 0;
  let losses = 0;
  let total = score.length;

  // Iterates through the score array to calculate wins and losses
  for (let i = 0; i < total; i++) {
    let item = score[i];
    if (item === true) {
      wins = wins + 1; //Increment wins for correct guesses
    } else {
      losses = losses + 1; //Increment losses for incorrect guesses
    }
  }
  return { win: wins, loss: losses, total: total };
}

function restartTheGame() {
  results = [];
  solution = null;
  gameOver = false;
}

// When a key is pressed, it checks if guessItem exists.
function keyPressed() {
  if (gameOver === true) {
    if (keyCode === ENTER) {
      console.log(`Restart the game`);
      restartTheGame();
      return;
    }
  }

  if (guessItem !== null) {
    //Ensure there is a GuessItem to solve
    console.log("key pressed", key);
    solution = guessItem.solve(key); //setting solution to true or false
    if (solution) {
      results.push(true); //adds a win to the results array
    } else {
      results.push(false); //adds a loss to the results array
    }
    guessItem = null; //rest after a guess
  } else {
    ("Nothing to be solved");
  }
}

//Constructor function for GuessItem
function GuessItem(x, y, scl) {
  this.x = x; //position on the canvas
  this.y = y; //position on the canvas
  this.scale = scl; //size of the content text
  this.scaleIncrement = 0.5;
  this.content = getContent(); //a random single-digit number generated by getContent()
  this.alpha = 255; //transparency of the text, which fades over time
  this.alphaDecrement = 3;
  this.solved; //Tracks if the GuessItem has been solved
  this.contentMap = {
    1: "one",
    2: "two",
    3: "three",
    4: "four",
    5: "five",
    6: "six",
    7: "seven",
    8: "eight",
    9: "nine",
    0: "zero",
  };

  function getContent() {
    return String(parseInt(random(10), 10)); //Returns a random number between 0-9 as a string
  }

  // this method checks if the input matches the content and return true or false
  this.solve = function (input) {
    if (input === this.content) {
      this.solved = true;
    } else {
      this.solved = false;
    }
    return this.solved; //Returns the solved status
  };

  // this method displays the content if it hasn't been sloved yet
  this.render = function () {
    if (this.solved === false) {
      //Skips rendering if the item has been incorrectly guessed
      return;
    }
    push(); //Starts a new drawing state
    fill(0, this.alpha); //Sets the text color with current transparency
    textAlign(CENTER, CENTER);
    translate(this.x, this.y); //Moves to the specified position
    scale(this.scale); //Scales the text size
    text(this.contentMap[this.content], 0, 0); //Display the content at the current position
    this.scale = this.scale + this.scaleIncrement; //scale increases, making the text larger over time
    this.alpha = this.alpha - this.alphaDecrement; //alpha decreases, making the text fade out gradually
    pop();
  };
}
